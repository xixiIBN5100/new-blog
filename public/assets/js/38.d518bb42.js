(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{475:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("以后大部分的博客可能就是这样的更新形式吧,"),s("s",[t._v("最近在看vue设计与实现这本书每读一部分我应该就会写一份总结")]),t._v("加上为了巩固js的基础功在看一些面试题")]),t._v(" "),s("p",[t._v("以后开篇新的将Vue设计与实现")]),t._v(" "),s("h2",{attrs:{id:"js面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js面试题"}},[t._v("#")]),t._v(" js面试题")]),t._v(" "),s("h3",{attrs:{id:"如何将类数组转化为数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何将类数组转化为数组"}},[t._v("#")]),t._v(" 如何将类数组转化为数组")]),t._v(" "),s("ul",[s("li",[t._v("什么是类数组"),s("br"),t._v("\n简单的定义,只要有length这个属性,那就是类数组."),s("br"),t._v("\n类数组在DOM极为常见,各种元素检索API返回的都是类数组(document.getElementByTagName,document.getQuerySelectAll)")]),t._v(" "),s("li",[t._v("怎么转化"),s("br"),t._v("\nES6 中有现成的 API：Array.from，极为简单")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [undefined, undefined, undefined]")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("当然可以使用"),s("code",[t._v("...")]),t._v("展开运算符 即"),s("code",[t._v("[...arrayLike]")]),t._v(" ,不过它只能作用于 iterable 对象，即拥有 Symbol(Symbol.iterator) 属性值")]),t._v(" "),s("h3",{attrs:{id:"promise-allsettled-和promise-all-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-allsettled-和promise-all-的区别"}},[t._v("#")]),t._v(" Promise.allSettled() 和Promise.all()的区别")]),t._v(" "),s("p",[t._v("两个都是有关Promise的API,比较一下他们的异同")]),t._v(" "),s("ul",[s("li",[t._v("Promise.allSettled()\n这个API接收一个Promise数组对象,待数组中所有Promise都解决的时候,返回一个解决完毕的数组(无论数组中的promise是否被成功解决)")]),t._v(" "),s("li",[t._v("Promise.all()"),s("br"),t._v("\n这个API接收一个Promise数组对象,待数组中所有Promise都解决的时候,返回一个解决完毕的数组,但是但凡数组中有一个promise被reject了,就只会返回错误的原因(即被reject的promise中reject里面的参数)")])]),t._v(" "),s("p",[t._v("手写Promise.allSettled() 能更加明显的感受到他们两个的异同")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myPromiseallSettled")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("items")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onResoloved")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fulfilled"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onRejected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rejected"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reason"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("All")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Promise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onResoloved"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("onRejected"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("这样,即使items中出现错误也会被then及时捕捉,不会像Promise.all()一旦有promise被reject就拿不到之前处理成功的数据")]),t._v(" "),s("h3",{attrs:{id:"什么是-iterable-对象-与-array-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-iterable-对象-与-array-有什么区别"}},[t._v("#")]),t._v(" 什么是 Iterable 对象，与 Array 有什么区别")]),t._v(" "),s("ul",[s("li",[t._v("实现了 [Symbol.iterator] 属性的对象就是 Iterable 对象，然后可以使用操作符 for...of 进行迭代")]),t._v(" "),s("li",[t._v("Array 可以直接通过索引访问和修改元素，而 Iterable 对象需要使用迭代器方法才能访问和修改元素。")]),t._v(" "),s("li",[t._v("Array 可以使用一系列的数组方法，比如 push、pop、slice 等，来操作和处理数组，而 Iterable 对象没有直接提供相应的方法，需要通过迭代器方法和其他操作来实现相应的功能。")]),t._v(" "),s("li",[t._v("Array 的长度是可变的，可以通过改变数组的长度来增加或减少元素的个数，而 Iterable 对象的长度是固定的，不能直接改变。")]),t._v(" "),s("li",[t._v("Array 可以通过字面量方式创建，比如 [1, 2, 3]，而 Iterable 对象需要通过实现迭代器方法来创建，比如通过 Generator 函数来生成一个 Iterable 对象。")])]),t._v(" "),s("h3",{attrs:{id:"map与weakmap的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map与weakmap的区别"}},[t._v("#")]),t._v(" Map与WeakMap的区别")]),t._v(" "),s("ul",[s("li",[t._v("Map可使用任何数据类型作为 key，但因其在内部实现原理中需要维护两个数组，存储 key/value，因此垃圾回收机制无法回收")]),t._v(" "),s("li",[t._v("WeakMap: 只能使用引用数据类型作为 key。弱引用，不在内部维护两个数组，可被垃圾回收，但因此无法被遍历！即没有与枚举相关的 API，如 keys、values、entries 等")])]),t._v(" "),s("h3",{attrs:{id:"如何创建一个数组大小为100-每个值都为0的数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何创建一个数组大小为100-每个值都为0的数组"}},[t._v("#")]),t._v(" 如何创建一个数组大小为100，每个值都为0的数组")]),t._v(" "),s("ul",[s("li",[t._v("方法一"),s("br"),t._v(" "),s("code",[t._v("Array(100).fill(0)")])]),t._v(" "),s("li",[t._v("方法二"),s("br"),t._v(" "),s("code",[t._v("Array.from(Array(100), (x) => 0 )")])])]),t._v(" "),s("p",[s("strong",[t._v("为什么不能使用"),s("code",[t._v("Array(100).map(() => 0)")])])]),t._v(" "),s("p",[t._v("当你使用 "),s("code",[t._v("Array")]),t._v(" 构造函数创建一个数组并传入一个整数时，例如 "),s("code",[t._v("Array(100)")]),t._v("，你得到一个长度为 100 的数组，但这些元素都是未初始化的。这是一个稀疏数组。稀疏数组在概念上具有指定的长度，但没有实际的元素存在。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 100")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ <100 empty items> ]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果你直接对这个稀疏数组使用 "),s("code",[t._v("map")]),t._v(" 方法，由于数组中的元素没有被初始化，因此 "),s("code",[t._v("map")]),t._v(" 函数不会对这些位置调用回调函数。这是因为 "),s("code",[t._v("map")]),t._v(" 只会对那些有值的索引调用回调函数，而稀疏数组中的索引位置是“空的”。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ <100 empty items> ]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("s",[t._v("完美解释")])]),t._v(" "),s("p",[t._v("嗯通过一些面试题确实能够巩固一些基础知识,"),s("s",[t._v("虽然可能开发中很少遇到")]),t._v(",收获还是挺大的")]),t._v(" "),s("blockquote",[s("p",[t._v("写于第四阅览室")])])])}),[],!1,null,null,null);s.default=e.exports}}]);